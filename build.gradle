plugins {
    id("com.github.johnrengelman.shadow") version "6.1.0"
    id("io.micronaut.application") version "1.2.0"
}

version = "0.1"
group = "com.example"

repositories {
    mavenCentral()
    jcenter()
    maven { url "https://oss.jfrog.org/oss-snapshot-local" }
    maven { url "https://dl.bintray.com/fnproject/fnproject" }
}

micronaut {
    testRuntime("junit5")
    processing {
        incremental(true)
        annotations("com.example.*")
    }
}

dependencies {
    implementation("io.micronaut:micronaut-validation")
    implementation("io.micronaut:micronaut-runtime")
    implementation("jakarta.annotation:jakarta.annotation-api")
    implementation("io.micronaut.oraclecloud:micronaut-oraclecloud-function")
    implementation("com.fnproject.fn:api")
    runtimeOnly("com.fnproject.fn:runtime")
    testImplementation("com.fnproject.fn:testing-junit4")
    implementation("io.micronaut.aws:micronaut-function-aws")
    runtimeOnly("org.slf4j:slf4j-simple")
    testImplementation("io.micronaut:micronaut-http-client")
}


application {
    mainClass.set("com.fnproject.fn.runtime.EntryPoint")
}

java {
    sourceCompatibility = JavaVersion.toVersion("11")
    targetCompatibility = JavaVersion.toVersion("11")
}

tasks {

    nativeImage {
      args("--static",
           "-Dfn.handler=com.example.Function::handleRequest",
           "--initialize-at-build-time=com.example")
    }

    dockerfileNative {
      args("-XX:MaximumHeapSizePercent=80")
      buildStrategy.set(io.micronaut.gradle.docker.DockerBuildStrategy.ORACLE_FUNCTION)
      defaultCommand.set("com.example.Function::handleRequest")
    }

    dockerfile {
      buildStrategy.set(io.micronaut.gradle.docker.DockerBuildStrategy.ORACLE_FUNCTION)
      defaultCommand.set("com.example.Function::handleRequest")
    }
    dockerBuild {
        images = ["${System.env.DOCKER_IMAGE ?: project.name}:$project.version"]
    }

    dockerBuildNative {
        images = ["${System.env.DOCKER_IMAGE ?: project.name}:$project.version"]
    }

}

